package siteParis;


import java.util.LinkedList;
import java.util.Collection;


/**
 * 
 * @author Bernard Prou et Julien Mallet
 * <br><br>
 * La classe qui contient toutes les m√©thodes "M√©tier" de la gestion du site de paris. 
 * <br><br>
 * Dans toutes les m√©thodes :
 * <ul>
 * <li>un param√®tre de type <code>String</code> est invalide si il n'est pas instanci√©.</li>
 *  <li>pour la validit√© d'un password de gestionnaire et d'un password de joueur :
 * <ul>
 * <li>       lettres et chiffres sont les seuls caract√®res autoris√©s </li>
 * <li>       il doit avoir une longueur d'au moins 8 caract√®res </li>
 * </ul></li>       
 * <li>pour la validit√© d'un pseudo de joueur  :
 * <ul>
 * <li>        lettres et chiffres sont les seuls caract√®res autoris√©s  </li>
 * <li>       il doit avoir une longueur d'au moins 4 caract√®res</li>
 * </ul></li>       
 * <li>pour la validit√© d'un pr√©nom de joueur et d'un nom de joueur :
 *  <ul>
 *  <li>       lettres et tiret sont les seuls caract√®res autoris√©s  </li>
 *  <li>      il  doit avoir une longueur d'au moins 1 caract√®re </li>
 * </ul></li>
 * <li>pour la validit√© d'une comp√©tition  :       
 *  <ul>
 *  <li>       lettres, chiffres, point, trait d'union et soulign√© sont les seuls caract√®res autoris√©s </li>
 *  <li>      elle  doit avoir une longueur d'au moins 4 caract√®res</li>
 * </ul></li>       
 * <li>pour la validit√© d'un comp√©titeur  :       
 *  <ul>
 *  <li>       lettres, chiffres, trait d'union et soulign√© sont les seuls caract√®res autoris√©s </li>
 *  <li>      il doit avoir une longueur d'au moins 4 caract√®res.</li>
 * </ul></li></ul>
 */

public class SiteDeParisMetier {

   //* Attributs */
   private LinkedList<Joueur> joueurs;
   private LinkedList<Competition> competitions;
   private String passwordGestionnaire;
   //comptesDesJoueurs n'est pas utilisÈ, dÈpend de la sÈcuritÈ qu'on veut
   //private LinkedList<long> comptesDesJoueurs;
   

	/**
	 * constructeur de <code>SiteDeParisMetier</code>. 
	 * 
	 * @param passwordGestionnaire   le password du gestionnaire.   
	 * 
	 * @throws MetierException  lev√©e 
	 * si le <code>passwordGestionnaire</code>  est invalide 
	 */
   public SiteDeParisMetier(String passwordGestionnaire) throws MetierException {
      
      validitePasswordGestionnaire(passwordGestionnaire);
      
      this.joueurs = new LinkedList<Joueur>();
      this.competitions = new LinkedList<Competition>();
      this.passwordGestionnaire = passwordGestionnaire;
   
   }





	// Les m√©thodes du gestionnaire (avec mot de passe gestionnaire)



	/**
	 * inscrire un joueur. 
	 * 
	 * @param nom   le nom du joueur 
	 * @param prenom   le pr√©nom du joueur   
	 * @param pseudo   le pseudo du joueur  
	 * @param passwordGestionnaire  le password du gestionnaire du site  
	 * 
	 * @throws MetierException   lev√©e  
	 * si le <code>passwordGestionnaire</code> propos√© est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect.
	 * @throws JoueurExistantException   lev√©e si un joueur existe avec les m√™mes noms et pr√©noms ou le m√™me pseudo.
	 * @throws JoueurException lev√©e si <code>nom</code>, <code>prenom</code>, <code>pseudo</code> sont invalides.
	 * 
	 * @return le mot de passe (d√©termin√© par le site) du nouveau joueur inscrit.
	 */
   public String inscrireJoueur(String nom, String prenom, String pseudo, String passwordGestionnaire) throws MetierException, JoueurExistantException, JoueurException {
   	
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
      for (Joueur j:joueurs){
         if ( j.getNom().equals(nom) && j.getPrenom().equals(prenom) || j.getPseudo().equals(pseudo) )
            throw new JoueurExistantException();
      }
      Joueur joueur = new Joueur(nom,prenom,pseudo);
      this.joueurs.add(joueur);  
      
      return "unPasswordUnique";
   }

	/**
	 * supprimer un joueur. 
	 * 
	 * @param nom   le nom du joueur 
	 * @param prenom   le pr√©nom du joueur   
	 * @param pseudo   le pseudo du joueur  
	 * @param passwordGestionnaire  le password du gestionnaire du site  
	 * 
	 * @throws MetierException
	 * si le <code>passwordGestionnaire</code>  est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect.
	 * @throws JoueurInexistantException   lev√©e si il n'y a pas de joueur  avec le m√™me <code>nom</code>, <code>prenom</code>  et <code>pseudo</code>.
	 * @throws JoueurException lev√©e 
	 * si le joueur a des paris en cours,
	 * si <code>nom</code>, <code>prenom</code>, <code>pseudo</code> sont invalides.
	 * 
	 * @return le nombre de jetons √† rembourser  au joueur qui vient d'√™tre d√©sinscrit.
	 * 
	 */
   public long desinscrireJoueur(String nom, String prenom, String pseudo, String passwordGestionnaire) throws MetierException, JoueurInexistantException, JoueurException {
   	
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
      boolean ilya=false;
      int position=0;
      
      for (Joueur j:joueurs){
         if ( j.getPseudo().equals(pseudo)) {
            ilya = true;
            position = joueurs.indexOf(j);}
            
      }
      if (!ilya) throw new JoueurInexistantException();
      
      this.joueurs.remove(position);
      
      
      return 0;
   }



	/**
	 * ajouter une comp√©tition.  
	 * 
	 * @param competition le nom de la comp√©tition
	 * @param dateCloture   la date √† partir de laquelle il ne sera plus possible de miser  
	 * @param competiteurs   les noms des diff√©rents comp√©titeurs de la comp√©tition 
	 * @param passwordGestionnaire  le password du gestionnaire du site 
	 * 
	 * @throws MetierException lev√©e si le tableau des
	 * comp√©titeurs n'est pas instanci√©, si le
	 * <code>passwordGestionnaire</code> est invalide, si le
	 * <code>passwordGestionnaire</code> est incorrect.
	 * @throws CompetitionExistanteException lev√©e si une comp√©tition existe avec le m√™me nom. 
	 * @throws CompetitionException lev√©e si le nom de la
	 * comp√©tition ou des comp√©titeurs sont invalides, si il y a
	 * moins de 2 comp√©titeurs, si un des competiteurs n'est pas instanci√©,
	 * si deux comp√©titeurs ont le m√™me nom, si la date de cl√¥ture 
	 * n'est pas instanci√©e ou est d√©pass√©e.
	 */
   public void ajouterCompetition(String nomCompetition, DateFrancaise dateCloture, String[] stringCompetiteurs, String passwordGestionnaire) throws MetierException, CompetitionExistanteException, CompetitionException  {
      
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      // La verification que le nom de la compÈtition est recevable s'effectue dans la classe Competition
      
      // Verification que la compÈtition n'est pas dÈja enregistrÈe
      if (this.competitions.size() > 0){
         for (Competition c:competitions){
            if ( c.getNomCompetition().equals(nomCompetition) )
               throw new CompetitionExistanteException();
         }
      }
      // Verification que la liste des compÈtiteurs fournie contient au moins deux compÈtiteurs 
      if ( stringCompetiteurs == null ) throw new MetierException();
      if ( stringCompetiteurs.length <= 1  ) throw new CompetitionException();
      
      // VÈrification qu'un compÈtiteur n'est pas prÈsent deux fois dans la liste fournie (ne se bat pas contre lui-mÍme)
      for (int i=0;i<stringCompetiteurs.length;i++){
         for (int j=0;j<stringCompetiteurs.length;j++){
            if ( (stringCompetiteurs[i]== stringCompetiteurs[j]) &&  (i!=j) )
               throw new CompetitionException();
         }
      }
      
      // VÈrification que les dates sont cohÈrentes   
      if ( dateCloture == null   ) throw new CompetitionException();  
      if ( dateCloture.estDansLePasse()   ) throw new CompetitionException();  
      
      
      LinkedList<Competiteur> competiteurs = new LinkedList<Competiteur>();
      for (String s: stringCompetiteurs)
         competiteurs.add( new Competiteur(s) );
         
          
      Competition competition = new Competition(nomCompetition,dateCloture);
      competition.setListeCompetiteurs(competiteurs);      
      //Ajout de la compÈtition crÈÈe dans la liste de compÈtitions du site
      this.competitions.add(competition);
      
   }


	/**Competition avec vainqueur).  
	 * 
	 * Chaque joueur ayant mis√© sur cette comp√©tition
	 * en choisissant ce comp√©titeur est cr√©dit√© d'un nombre de
	 * jetons √©gal √† :
	 * 
	 * (le montant de sa mise * la somme des
	 * jetons mis√©s pour cette comp√©tition) / la somme des jetons
	 * mis√©s sur ce comp√©titeur.
	 *
	 * Si aucun joueur n'a trouv√© le
	 * bon comp√©titeur, des jetons sont cr√©dit√©s aux joueurs ayant
	 * mis√© sur cette comp√©tition (conform√©ment au montant de
	 * leurs mises). La comp√©tition est "supprim√©e" si il ne reste
	 * plus de mises suite √† ce solde.
	 * 
	 * @param competition   le nom de la comp√©tition  
	 * @param vainqueur   le nom du vainqueur de la comp√©tition 
	 * @param passwordGestionnaire  le password du gestionnaire du site 
	 * 
	 * @throws MetierException   lev√©e 
	 * si le <code>passwordGestionnaire</code>  est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect.
	 * @throws CompetitionInexistanteException   lev√©e si il n'existe pas de comp√©tition de m√™me nom.
	 * @throws CompetitionException lev√©e 
	 * si le nom de la comp√©tition ou du vainqueur est invalide, 
	 * si il n'existe pas de comp√©titeur du nom du vainqueur dans la comp√©tition,
	 * si la date de cl√¥ture de la comp√©tition est dans le futur.
	 * 
	 */	
   public void solderVainqueur(String competition, String vainqueur, String passwordGestionnaire) throws MetierException,  CompetitionInexistanteException, CompetitionException  {
   
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
     
   }



	/**
	 * cr√©diter le compte en jetons d'un joueur du site de paris.
	 * 
	 * @param nom   le nom du joueur 
	 * @param prenom   le pr√©nom du joueur   
	 * @param pseudo   le pseudo du joueur  
	 * @param sommeEnJetons   la somme en jetons √† cr√©diter  
	 * @param passwordGestionnaire  le password du gestionnaire du site  
	 * 
	 * @throws MetierException   lev√©e 
	 * si le <code>passwordGestionnaire</code>  est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect,
	 * si la somme en jetons est n√©gative.
	 * @throws JoueurException lev√©e  
	 * si <code>nom</code>, <code>prenom</code>,  <code>pseudo</code> sont invalides.
	 * @throws JoueurInexistantException   lev√©e si il n'y a pas de joueur  avec les m√™mes nom,  pr√©nom et pseudo.
	 */
   public void crediterJoueur(String nom, String prenom, String pseudo, long sommeEnJetons, String passwordGestionnaire) throws MetierException, JoueurException, JoueurInexistantException {
      
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
      validiteJoueur(nom, prenom, pseudo);
      existanceJoueur(nom, prenom, pseudo);
      
      // Verification que la somme ‡ crÈditer est correcte
      if (sommeEnJetons < 0) {throw new MetierException();}
      //On crÈdite enfin
      getJoueur(nom, prenom, pseudo).crediterJoueur(sommeEnJetons);
      
   }


	/**
	 * d√©biter le compte en jetons d'un joueur du site de paris.
	 * 
	 * @param nom   le nom du joueur 
	 * @param prenom   le pr√©nom du joueur   
	 * @param pseudo   le pseudo du joueur  
	 * @param sommeEnJetons   la somme en jetons √† d√©biter  
	 * @param passwordGestionnaire  le password du gestionnaire du site  
	 * 
	 * @throws MetierException   lev√©e 
	 * si le <code>passwordGestionnaire</code>  est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect,
	 * si la somme en jetons est n√©gative.
	 * @throws JoueurException lev√©e  
	 * si <code>nom</code>, <code>prenom</code>,  <code>pseudo</code> sont invalides 
	 * si le compte en jetons du joueur est insuffisant (il deviendrait n√©gatif).
	 * @throws JoueurInexistantException   lev√©e si il n'y a pas de joueur  avec les m√™mes nom,  pr√©nom et pseudo.
	 * 
	 */

   public void debiterJoueur(String nom, String prenom, String pseudo, long sommeEnJetons, String passwordGestionnaire) throws  MetierException, JoueurInexistantException, JoueurException {
   
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
      validiteJoueur(nom, prenom, pseudo);
      existanceJoueur(nom, prenom, pseudo);
      
      // Verification que la somme ‡ dÈbiter est correcte
      if (sommeEnJetons < 0) {throw new MetierException();}
      // Verification que le solde est suffisant
      if (getJoueur(nom, prenom, pseudo).getSommeEnJetons()<sommeEnJetons){throw new JoueurException();}
      //On crÈdite enfin      
      getJoueur(nom, prenom, pseudo).debiterJoueur(sommeEnJetons);      
   }



	/** 
	 * consulter les  joueurs.
	 * 
	 * @param passwordGestionnaire  le password du gestionnaire du site de paris 

	 * @throws MetierException   lev√©e  
	 * si le <code>passwordGestionnaire</code>  est invalide,
	 * si le <code>passwordGestionnaire</code> est incorrect.
	 * 
	 * @return une liste de liste dont les √©l√©ments (de type <code>String</code>) repr√©sentent un joueur avec dans l'ordre : 
	 *  <ul>
	 *  <li>       le nom du joueur  </li>
	 *  <li>       le pr√©nom du joueur </li>
	 *  <li>       le pseudo du joueur  </li>
	 *  <li>       son compte en jetons restant disponibles </li>
	 *  <li>       le total de jetons engag√©s dans ses mises en cours. </li>
	 *  </ul>
	 */
   public LinkedList <LinkedList <String>> consulterJoueurs(String passwordGestionnaire) throws MetierException {
   
      validitePasswordGestionnaire(passwordGestionnaire);
      veracitePasswordGestionnaire(passwordGestionnaire);
      
      LinkedList<LinkedList <String>> listeAretourner = new LinkedList<LinkedList <String>>();
         for (Joueur j:joueurs) {
            LinkedList<String> attributsDuJoueur = new LinkedList<String>();
            attributsDuJoueur.add(j.getNom());
            attributsDuJoueur.add(j.getPrenom());
            attributsDuJoueur.add(j.getPseudo());
            // Conversion de la valeur du compte en jetons de long ‡ String
            String compteDuJoueur = Long.toString(j.getSommeEnJetons());
            attributsDuJoueur.add(compteDuJoueur);
            // A continuer,je ne sais pas encore comment on gËre la mise sur un vainqueur
            
            // Une fois les attributs empaquetÈs, on les ajoute ‡ la liste gÈnÈrale
            listeAretourner.add(attributsDuJoueur); 
         }
      return listeAretourner;
   }








	// Les m√©thodes avec mot de passe utilisateur



	/**
	 * miserVainqueur  (parier sur une comp√©tition, en d√©signant un vainqueur).
	 * Le compte du joueur est d√©bit√© du nombre de jetons mis√©s.
	 * 
	 * @param pseudo   le pseudo du joueur  
	 * @param passwordJoueur  le password du joueur  
	 * @param miseEnJetons   la somme en jetons √† miser  
	 * @param competition   le nom de la comp√©tition  relative au pari effectu√©
	 * @param vainqueurEnvisage   le nom du comp√©titeur  sur lequel le joueur mise comme √©tant le  vainqueur de la comp√©tition  
	 * 
	 * @throws MetierException lev√©e si la somme en jetons est n√©gative.
	 * @throws JoueurInexistantException lev√©e si il n'y a pas de
	 * joueur avec les m√™mes pseudos et password.
	 * @throws CompetitionInexistanteException   lev√©e si il n'existe pas de comp√©tition de m√™me nom. 
	 * @throws CompetitionException lev√©e 
	 * si <code>competition</code> ou <code>vainqueurEnvisage</code> sont invalides,
	 * si il n'existe pas un comp√©titeur de  nom <code>vainqueurEnvisage</code> dans la comp√©tition,
	 * si la comp√©tition n'est plus ouverte (la date de cl√¥ture est dans le pass√©).
	 * @throws JoueurException   lev√©e 
	 * si <code>pseudo</code> ou <code>password</code> sont invalides, 
	 * si le <code>compteEnJetons</code> du joueur est insuffisant (il deviendrait n√©gatif).
	 */
   public void miserVainqueur(String pseudo, String passwordJoueur, long miseEnJetons, String competition, String vainqueurEnvisage) throws MetierException, JoueurInexistantException, CompetitionInexistanteException, CompetitionException, JoueurException  {
   
   }


    

	// Les m√©thodes sans mot de passe


	/**
	 * conna√Ætre les comp√©titions en cours.
	 * 
	 * @return une liste de liste dont les √©l√©ments (de type <code>String</code>) repr√©sentent une comp√©tition avec dans l'ordre : 
	 *  <ul>
	 *  <li>       le nom de la comp√©tition,  </li>
	 *  <li>       la date de cl√¥ture de la comp√©tition. </li>
	 *  </ul>
	 */
   public LinkedList <LinkedList <String>> consulterCompetitions(){
      return new LinkedList <LinkedList <String>>();
   } 

	/**
	 * conna√Ætre  la liste des noms des comp√©titeurs d'une comp√©tition.  
	 * 
	 * @param competition   le nom de la comp√©tition  
	 * 
	 * @throws CompetitionException   lev√©e  
	 * si le nom de la comp√©tition est invalide.
	 * @throws CompetitionInexistanteException   lev√©e si il n'existe pas de comp√©tition de m√™me nom. 
	 * 
	 * @return la liste des comp√©titeurs de la  comp√©tition.
	 */
   public LinkedList <String> consulterCompetiteurs(String competition) throws CompetitionException, CompetitionInexistanteException{
      validiteCompetition(competition);
      
      // L'existance de la compÈtition est vÈrifiÈe ‡ l'interieur de "getCompetition" 
      LinkedList<Competiteur> listeCompetiteurs = getCompetition(competition).getListeCompetiteurs();
      
      // Construction puis remplissage de la liste ‡ renvoyer
      LinkedList<String> listeCompetiteursString = new LinkedList<String>();
      for (Competiteur c:listeCompetiteurs) {
         listeCompetiteursString.add(c.getNomCompetiteur());
         }
         
      // on retourne la liste composÈe du nom des competiteurs   
      return listeCompetiteursString;
   }

	/**
	 * v√©rifier la validit√© du password du gestionnaire.
	 * 
	 * @param passwordGestionnaire   le password du gestionnaire √† v√©rifier
	 * 
	 * @throws MetierException   lev√©e 
	 * si le <code>passwordGestionnaire</code> est invalide.  
	 */
   protected void validitePasswordGestionnaire(String passwordGestionnaire) throws MetierException {
      if (passwordGestionnaire==null) throw new MetierException();
      if (!passwordGestionnaire.matches("[0-9A-Za-z]{8,}")) throw new MetierException();
   }

   protected void veracitePasswordGestionnaire(String passwordGestionnaire) throws MetierException {
      if ( !this.passwordGestionnaire.equals(passwordGestionnaire) ) throw new MetierException();
   }
   
   protected void validiteJoueur(String nom, String prenom, String pseudo) throws JoueurException {
      if (nom == null || prenom == null || pseudo == null){ throw new JoueurException(); }
      if (!nom.matches("[A-Za-z-]{1,}") || !prenom.matches("[A-Za-z-]{1,}") || !pseudo.matches("[0-9A-Za-z]{4,}")){ throw new JoueurException();}
   }
   
   protected void existanceJoueur(String nom, String prenom, String pseudo) throws JoueurInexistantException {
      boolean joueurInexistant = true;
      for(Joueur j:joueurs){
         if (j.getNom().equals(nom) && j.getPrenom().equals(prenom) && j.getPseudo().equals(pseudo)){
            joueurInexistant = false;
         }
      }
      if (joueurInexistant) {throw new JoueurInexistantException(); }
   }
   
   // ValiditÈ ou existance de la compÈtition
   protected void validiteCompetition(String nomCompetition) throws CompetitionException {
      if (nomCompetition == null) {throw new CompetitionException();}
      if (!nomCompetition.matches("[a-zA-Z0-9-._]{4,}")) {throw new CompetitionException();}
   }
   
/* protected void existanceCompetition(String nomCompetition) throws CompetitionInexistanteException {
      boolean competitionInexistante = true;
      for(Competition c:competitions){
         if (c.getNomCompetition().equals(nomCompetition)){
            competitionInexistante = false;
         }
      }
      if (competitionInexistante) {throw new CompetitionInexistanteException(); }
   }*/
   
   //getJoueur permet de rÈcupÈrer "joueur" ‡ partir de son nom, prÈnom, pseudo
   protected Joueur getJoueur(String nom, String prenom, String pseudo) throws JoueurInexistantException {
      boolean joueurInexistant = true;
      for(Joueur j:joueurs){
         if (j.getNom().equals(nom) && j.getPrenom().equals(prenom) && j.getPseudo().equals(pseudo)){
            joueurInexistant = false;
            return j;
         }
      }
      if (joueurInexistant) {throw new JoueurInexistantException(); }
      return null;
   }
   
   // getCompetition permet de rÈcupÈrer "competition" ‡partir de son nom
   protected Competition getCompetition(String nomCompetition) throws CompetitionInexistanteException {
      boolean competitionInexistante = true;
      for(Competition c:competitions){
         if (c.getNomCompetition().equals(nomCompetition)){
            competitionInexistante = false;
            return c;
         }
      }
      if (competitionInexistante) {throw new CompetitionInexistanteException(); }
      return null;
   }
   

}



